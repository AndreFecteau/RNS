/////////////////////////////////////////////////////////////////////////
/// \brief The Following Function block sets up the Grid for computation.
/// \tips  Using less than 16 points per flame length typically does not give a
///        converged chape of the solution. This is also a Implicit code and
///        the stable timestep for a finer mesh seems to proportianally neglect the
///        extra time for the finer mesh to be computed.
/// \tips  Using an inital coarse mesh will converge faster to the general shape "Due
///        to more dissipation", refining the mesh after to itterate for the exact lambda
///        Value.
/// \tips  HLLE with 32 pt/fl to find general shape then switch to CD2 with 512 pt/fl to
///        itterate lambda.
var per_fl = 16;
var domain = 500;
var number_of_cells = per_fl*domain;
var xmin = 0.0;
var xmax = domain;
auto grid = Grid1D(xmin, xmax, number_of_cells);

/////////////////////////////////////////////////////////////////////////
/// \brief The Following Function block sets up the Flow properties.
/// \tips See J.Sharpe, 2006 for definition of these variables.
var Pr                = 0.75;
var Le                = 1.0;
var Q_low_mach        = 9.0;
var beta              = 5.0;
var lambda            = 0.00;
var mf                = 0.01;
var T_ignition_scalar = 1.02;
var gamma             = 1.4;
var theta_low_mach    = beta*(1+Q_low_mach)*(1+Q_low_mach)/Q_low_mach;
auto flow = Flow(Pr, Le, Q_low_mach, theta_low_mach, mf, gamma, lambda, T_ignition_scalar);

/////////////////////////////////////////////////////////////////////////
/// \brief You can pass a lambda for Initial_Condition if you want
/*auto ic = fun[] (double x) {
  auto U = Solution_vector_type();
  U[0] = 2.0*x;
  U[1] = 0.0;
  U[2] = 0.0;
  U[3] = 0.0;
  return U;
};*/

/////////////////////////////////////////////////////////////////////////
/// \brief Choose Initial Conditions
/*set_initial_solution(grid, ic);*/
/*deflagration_mf_point(grid, flow);*/
RK4_mf_point(grid, flow);

/////////////////////////////////////////////////////////////////////////
/// \brief Sets up the block
/// \tips See *ref for definition of these variables.
var Theta = 1.0;
var zeta = 0.5;
var CFL = 5.0e4;
var frame_time = 2.0e3;
var filename = "Movie/Le_1_64FL_";
var flame_location = 250.0;
var dissipation_magnitude = 0.9;
auto solver= CD2_solver(flow, grid, frame_time, CFL, Theta, zeta, filename, flame_location, dissipation_magnitude);
/*var tempLambda = solver.get_lambda()*1.25;*/
var lambda_min = solver.get_lambda() * 0.9;
var lambda_run = solver.get_lambda();
var lambda_max = solver.get_lambda() *1.1;
/*solver.change_lambda(124000);*/

var old_check1 = false;
var old_check2 = true;
var old_check3 = false;

solver.print_stats();
solver.solve(8);
solver.refine(64);
solver.change_CFL(5.0e6);
/*solver.add_space_in_back(1500);*/

/*auto grid2 = solver.get_grid();
auto cdsolver= CD2_solver(flow, grid2, frame_time, CFL, Theta, zeta, "Movie/DeleteCD_", flame_location, 0.9);*/
while (lambda_max-lambda_min > 1e-4) {
  var number_of_frames = 3;
  var check = solver.solve(number_of_frames);
  var lambda_run = solver.get_lambda();
  bisection_lambda(lambda_min, lambda_max, lambda_run, check);
  add_lambda_gap(check, old_check1, old_check2, old_check3, lambda_min, lambda_max);
  solver.change_lambda(lambda_run);
}
solver.print_stats();
